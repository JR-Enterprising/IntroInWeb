*When you are done with the challenge push it to the git.

The purpose of this challenge is to implement a supermarket checkout that calculates the total price of a number of items.

In a normal supermarket, things are identified using Stock Keeping Units, or SKUs. 
In our store, we'll use names of products (jeans, shirts, and so on). 
Our goods are priced individually. In addition, some items are multi-priced: buy n of them, and they'll cost you y euro. 
For example, one pair of jeans cost 50 pounds individually, but this week we have a special offer: 
buy three pairs of jeans and they'll cost you 130.

Our price table and offers: 
+--------+-------+------------------+
| Item   | Price | Special offers   |
+--------+-------+------------------+
| jeans  | 50    | 3 pairs for 130  |
| shirts | 30    | 2 pairs for 45   |
| shoes  | 20    |                  |
| skirts | 15    |                  |
+--------+-------+------------------+


In order to complete the challenge you need to implement the following function:
    getPrice(jeans_amount, shirts_amount, shoes_amount, skirts_amount)

Where:
 - jeans_amount = the amount of jeans,
 - shirts_amount = the amount of shirts,
 - shoes_amount = the amount of shoes,
 - skirts_amount = the amount of skirts,

 - @return = a number representing the total checkout value of the items

Example:
jeans_amount = 4
shirts_amount = 1
shoes_amount = 3
skirts_amount = 2

getPrice(4,1,3,2) will return 300

Explanation:

We have 4 pairs of jeans. This means that the price will be 130 (promo for 3 pairs) + 50 (the single pair).
Other than this we have no other offer so the price will be the standard one thus =>
130 + 50*1 + 30*1 + 3*20 + 15*2 = 300
