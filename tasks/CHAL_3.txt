ROUND 3 - More offers

Since the shop wants to extend, instead of product names we will use arrays of SKU(A,B,C,D and E).

The checkout feature is great and our supermarket is doing fine. Is time to think about growth.
Our marketing teams wants to experiment with new offer types and we should do our best to support them.

We are going to sell a new item E.
Normally E costs 40, but if you buy 2 of Es you will get B free. How cool is that ? Multi-priced items also seemed to work well so we should have more of these.

Our price table and offers: 
+------+-------+------------------------+
| Item | Price | Special offers         |
+------+-------+------------------------+
| A    | 50    | 3A for 130, 5A for 200 |
| B    | 30    | 2B for 45              |
| C    | 20    |                        |
| D    | 15    |                        |
| E    | 40    | 2E get one B free      |
+------+-------+------------------------+


Notes: 
 - All the offers are well balanced so that they can be safely combined.
 - For any illegal input return -1

In order to complete the round you need to implement the following function:
     getPrice(array)

Where:
 - array = A simple array containing at each index the SKU of a product
 - @return = a number representing the total checkout value of the items

Example:

getPrice(['A','B','C','C','A','A','A','A','E','A','A','A','A']) will return 490

Explanation:

In total we have
A: 9 products,
B: 1 product,
C: 2 product,
D: 0 product,
E: 1 product,

We have 1 5A offer, 1 3A offer, and 1A, 1B, 2C and 1E. This translates in 200 + 130 + 50 + 30 + 2*20 + 40 = 490